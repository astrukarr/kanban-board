// Utility functions for JWT token management
// Note: This is a dummy implementation for demo purposes
// In production, you would use a proper JWT library

/**
 * Generate a dummy JWT token for testing
 * In production, this would come from your authentication server
 */
export function generateDummyToken(): string {
  // This is a dummy token - in production, this would be generated by your backend
  const dummyPayload = {
    userId: '123',
    email: 'john.doe@example.com',
    exp: Math.floor(Date.now() / 1000) + 24 * 60 * 60, // 24 hours
  };

  // Simple base64 encoding (not secure - for demo only)
  const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));
  const payload = btoa(JSON.stringify(dummyPayload));
  const signature = btoa('dummy-signature');

  return `${header}.${payload}.${signature}`;
}

/**
 * Check if token exists and is valid
 */
export function isTokenValid(): boolean {
  const token = localStorage.getItem('token');
  if (!token) return false;

  try {
    // Parse the payload (in production, you'd verify the signature)
    const parts = token.split('.');
    if (parts.length !== 3) return false;

    const payload = JSON.parse(atob(parts[1]));
    const now = Math.floor(Date.now() / 1000);

    return payload.exp > now;
  } catch {
    return false;
  }
}

/**
 * Set token in localStorage
 */
export function setToken(token: string): void {
  localStorage.setItem('token', token);
}

/**
 * Remove token from localStorage
 */
export function removeToken(): void {
  localStorage.removeItem('token');
}

/**
 * Get token from localStorage
 */
export function getToken(): string | null {
  return localStorage.getItem('token');
}
